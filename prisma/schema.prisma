// =============================================================================
// PRISMA SCHEMA FOR DOMERA PLATFORM
// Real estate pre-construction platform with multi-tenant architecture
// Created: August 2025
// =============================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =============================================================================
// ENUMS
// =============================================================================

enum RoleType {
  admin
  organization_owner
  sales_manager
  finance_manager
  site_manager
  professional
  user
}

enum OrganizationStatus {
  active
  inactive
  pending_approval
  suspended
}

enum ProjectStatus {
  planning
  pre_sale
  construction
  completed
  delivered
}

enum UnitType {
  apartment
  commercial_space
  garage
  storage
  office
}

enum UnitStatus {
  available
  reserved
  sold
  in_process
}

// TODO: see other operations according to the type of operations
enum OperationStatus {
  initiated
  documents_pending
  documents_uploaded
  under_validation
  professional_assigned
  waiting_signature
  signature_completed
  payment_pending
  payment_confirmed
  completed
  cancelled
}

enum StepStatus {
  pending
  in_progress
  completed
  skipped
}

enum DocumentType {
  boleto_reserva
  compromiso_compraventa
  comprobante_pago
  cedula_identidad
  certificado_ingresos
  escritura
  plano_unidad
  reglamento_copropiedad
  otros
}

enum DocumentStatus {
  pending
  uploaded
  validated
  rejected
  expired
}

enum ProfessionalType {
  escribania
  contaduria
  legal
  otros
}

enum NotificationType {
  operation_update
  document_upload
  validation_required
  payment_reminder
  system_announcement
  professional_assignment
}

// =============================================================================
// ORGANIZATIONS AND USERS
// =============================================================================

model Organization {
  id          String             @id @default(uuid()) @db.Uuid
  name        String             @db.VarChar(255)
  slug        String             @unique @db.VarChar(100)
  email       String             @db.VarChar(255)
  phone       String?            @db.VarChar(50)
  address     String?
  taxId       String?            @unique @map("tax_id") @db.VarChar(50)
  status      OrganizationStatus @default(pending_approval)
  logoUrl     String?            @map("logo_url")
  websiteUrl  String?            @map("website_url")
  description String?
  createdAt   DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime           @updatedAt @map("updated_at") @db.Timestamptz
  createdBy   String?            @map("created_by") @db.Uuid
  isCorrected Boolean            @default(false) @map("is_corrected")
  correctionOf String?           @map("correction_of") @db.Uuid

  // Relations
  userRoles            UserRole[]
  projects             Project[]
  operations           Operation[]
  documents            Document[]
  documentTemplates    DocumentTemplate[]
  auditLogs            AuditLog[]
  correctedBy          Organization?      @relation("OrganizationCorrections", fields: [correctionOf], references: [id])
  corrections          Organization[]     @relation("OrganizationCorrections")

  @@map("organizations")
}

model User {
  id             String    @id @default(uuid()) @db.Uuid
  email          String    @unique @db.VarChar(255)
  password       String    @db.VarChar(255)
  firstName      String    @map("first_name") @db.VarChar(100)
  lastName       String    @map("last_name") @db.VarChar(100)
  phone          String?   @db.VarChar(50)
  documentType   String?   @map("document_type") @db.VarChar(20)
  documentNumber String?   @map("document_number") @db.VarChar(50)
  address        String?
  city           String?   @db.VarChar(100)
  country        String    @default("Uruguay") @db.VarChar(100)
  avatarUrl      String?   @map("avatar_url")
  isActive       Boolean   @default(true) @map("is_active")
  lastLogin      DateTime? @map("last_login") @db.Timestamptz
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  createdBy      String?   @map("created_by") @db.Uuid
  isCorrected    Boolean   @default(false) @map("is_corrected")
  correctionOf   String?   @map("correction_of") @db.Uuid

  // Relations
  userRoles                   UserRole[]
  operations                  Operation[]
  projects                    Project[]
  units                       Unit[]
  documents                   Document[]
  documentsUploaded           Document[]               @relation("DocumentUploader")
  documentsValidated          Document[]               @relation("DocumentValidator")
  documentTemplates           DocumentTemplate[]
  professionals               Professional[]
  professionalAssignments     ProfessionalAssignment[]
  notifications               Notification[]
  auditLogs                   AuditLog[]
  dataCorrections             DataCorrection[]         @relation("CorrectionRequester")
  dataCorrectionApprovals     DataCorrection[]         @relation("CorrectionApprover")
  professionalVerifications   Professional[]           @relation("ProfessionalVerifier")
  operationSteps              OperationStep[]
  operationCancellations      Operation[]              @relation("OperationCanceller")
  correctedBy                 User?                    @relation("UserCorrections", fields: [correctionOf], references: [id])
  corrections                 User[]                   @relation("UserCorrections")

  @@map("users")
}

model UserRole {
  id             String        @id @default(uuid()) @db.Uuid
  userId         String        @map("user_id") @db.Uuid
  organizationId String?       @map("organization_id") @db.Uuid
  role           RoleType
  isActive       Boolean       @default(true) @map("is_active")
  assignedAt     DateTime      @default(now()) @map("assigned_at") @db.Timestamptz
  assignedBy     String?       @map("assigned_by") @db.Uuid
  revokedAt      DateTime?     @map("revoked_at") @db.Timestamptz
  revokedBy      String?       @map("revoked_by") @db.Uuid
  isCorrected    Boolean       @default(false) @map("is_corrected")
  correctionOf   String?       @map("correction_of") @db.Uuid

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  correctedBy  UserRole?     @relation("UserRoleCorrections", fields: [correctionOf], references: [id])
  corrections  UserRole[]    @relation("UserRoleCorrections")

  @@unique([userId, organizationId, role])
  @@map("user_roles")
}

// =============================================================================
// PROJECTS AND PROPERTIES
// =============================================================================

model Project {
  id                  String        @id @default(uuid()) @db.Uuid
  organizationId      String        @map("organization_id") @db.Uuid
  name                String        @db.VarChar(255)
  slug                String        @db.VarChar(255)
  description         String?
  shortDescription    String?       @map("short_description") @db.VarChar(500)
  address             String
  neighborhood        String?       @db.VarChar(100)
  city                String        @default("Montevideo") @db.VarChar(100)
  latitude            Decimal?      @db.Decimal(10, 8)
  longitude           Decimal?      @db.Decimal(11, 8)
  status              ProjectStatus @default(planning)
  startDate           DateTime?     @map("start_date") @db.Date
  estimatedCompletion DateTime?     @map("estimated_completion") @db.Date
  actualCompletion    DateTime?     @map("actual_completion") @db.Date
  totalUnits          Int           @default(0) @map("total_units")
  availableUnits      Int           @default(0) @map("available_units")
  basePrice           Decimal?      @map("base_price") @db.Decimal(12, 2)
  currency            String        @default("USD") @db.VarChar(3)
  legalRegime         String?       @map("legal_regime") @db.VarChar(100)
  images              Json          @default("[]")
  amenities           Json          @default("[]")
  masterPlanFiles     Json          @default("[]") @map("master_plan_files")
  progressUpdates     Json          @default("[]") @map("progress_updates")
  createdAt           DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt           DateTime      @updatedAt @map("updated_at") @db.Timestamptz
  createdBy           String?       @map("created_by") @db.Uuid
  isCorrected         Boolean       @default(false) @map("is_corrected")
  correctionOf        String?       @map("correction_of") @db.Uuid

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator      User?        @relation(fields: [createdBy], references: [id])
  units        Unit[]
  correctedBy  Project?     @relation("ProjectCorrections", fields: [correctionOf], references: [id])
  corrections  Project[]    @relation("ProjectCorrections")

  @@unique([organizationId, slug])
  @@map("projects")
}

model Unit {
  id           String     @id @default(uuid()) @db.Uuid
  projectId    String     @map("project_id") @db.Uuid
  unitNumber   String     @map("unit_number") @db.VarChar(50)
  floor        Int?
  unitType     UnitType   @map("unit_type")
  status       UnitStatus @default(available)
  bedrooms     Int        @default(0)
  bathrooms    Int        @default(0)
  totalArea    Decimal?   @map("total_area") @db.Decimal(8, 2)
  builtArea    Decimal?   @map("built_area") @db.Decimal(8, 2)
  orientation  String?    @db.VarChar(50)
  facing       String?    @db.VarChar(50)
  price        Decimal    @db.Decimal(12, 2)
  currency     String     @default("USD") @db.VarChar(3)
  description  String?
  features     Json       @default("[]")
  images       Json       @default("[]")
  floorPlanUrl String?    @map("floor_plan_url")
  dimensions   String?    @db.VarChar(100)
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime   @updatedAt @map("updated_at") @db.Timestamptz
  createdBy    String?    @map("created_by") @db.Uuid
  isCorrected  Boolean    @default(false) @map("is_corrected")
  correctionOf String?    @map("correction_of") @db.Uuid

  // Relations
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator        User?           @relation(fields: [createdBy], references: [id])
  operationUnits OperationUnit[]
  correctedBy    Unit?           @relation("UnitCorrections", fields: [correctionOf], references: [id])
  corrections    Unit[]          @relation("UnitCorrections")

  @@unique([projectId, unitNumber])
  @@map("units")
}

// =============================================================================
// OPERATIONS AND WORKFLOW
// =============================================================================

model Operation {
  id                 String            @id @default(uuid()) @db.Uuid
  userId             String            @map("user_id") @db.Uuid
  organizationId     String            @map("organization_id") @db.Uuid
  status             OperationStatus   @default(initiated)
  totalAmount        Decimal           @map("total_amount") @db.Decimal(15, 2)
  platformFee        Decimal           @default(3000.00) @map("platform_fee") @db.Decimal(10, 2)
  currency           String            @default("USD") @db.VarChar(3)
  notes              String?
  startedAt          DateTime          @default(now()) @map("started_at") @db.Timestamptz
  completedAt        DateTime?         @map("completed_at") @db.Timestamptz
  cancelledAt        DateTime?         @map("cancelled_at") @db.Timestamptz
  cancelledBy        String?           @map("cancelled_by") @db.Uuid
  cancellationReason String?           @map("cancellation_reason")
  createdBy          String?           @map("created_by") @db.Uuid
  isCorrected        Boolean           @default(false) @map("is_corrected")
  correctionOf       String?           @map("correction_of") @db.Uuid

  // Relations
  user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization             Organization               @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  canceller                User?                      @relation("OperationCanceller", fields: [cancelledBy], references: [id])
  operationUnits           OperationUnit[]
  steps                    OperationStep[]
  professionalAssignments  ProfessionalAssignment[]
  documents                Document[]
  notifications            Notification[]
  correctedBy              Operation?                 @relation("OperationCorrections", fields: [correctionOf], references: [id])
  corrections              Operation[]                @relation("OperationCorrections")

  @@map("operations")
}

model OperationUnit {
  id                  String    @id @default(uuid()) @db.Uuid
  operationId         String    @map("operation_id") @db.Uuid
  unitId              String    @map("unit_id") @db.Uuid
  priceAtReservation  Decimal   @map("price_at_reservation") @db.Decimal(12, 2)
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  operation Operation @relation(fields: [operationId], references: [id], onDelete: Cascade)
  unit      Unit      @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@unique([operationId, unitId])
  @@map("operation_units")
}

model OperationStep {
  id          String      @id @default(uuid()) @db.Uuid
  operationId String      @map("operation_id") @db.Uuid
  stepName    String      @map("step_name") @db.VarChar(100)
  stepOrder   Int         @map("step_order")
  status      StepStatus  @default(pending)
  assignedTo  String?     @map("assigned_to") @db.Uuid
  startedAt   DateTime?   @map("started_at") @db.Timestamptz
  completedAt DateTime?   @map("completed_at") @db.Timestamptz
  dueDate     DateTime?   @map("due_date") @db.Timestamptz
  notes       String?
  metadata    Json        @default("{}")
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime    @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  operation    Operation @relation(fields: [operationId], references: [id], onDelete: Cascade)
  assignedUser User?     @relation(fields: [assignedTo], references: [id])

  @@unique([operationId, stepName])
  @@map("operation_steps")
}

// =============================================================================
// DOCUMENTS AND TEMPLATES
// =============================================================================

model Document {
  id              String         @id @default(uuid()) @db.Uuid
  operationId     String?        @map("operation_id") @db.Uuid
  userId          String         @map("user_id") @db.Uuid
  organizationId  String?        @map("organization_id") @db.Uuid
  documentType    DocumentType   @map("document_type")
  title           String         @db.VarChar(255)
  description     String?
  fileUrl         String         @map("file_url")
  fileName        String         @map("file_name") @db.VarChar(255)
  fileSize        Int?           @map("file_size")
  mimeType        String?        @map("mime_type") @db.VarChar(100)
  status          DocumentStatus @default(uploaded)
  uploadedBy      String         @map("uploaded_by") @db.Uuid
  validatedBy     String?        @map("validated_by") @db.Uuid
  validatedAt     DateTime?      @map("validated_at") @db.Timestamptz
  validationNotes String?        @map("validation_notes")
  expiresAt       DateTime?      @map("expires_at") @db.Timestamptz
  signatureUrl    String?        @map("signature_url")
  isSigned        Boolean        @default(false) @map("is_signed")
  signedAt        DateTime?      @map("signed_at") @db.Timestamptz
  createdAt       DateTime       @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime       @updatedAt @map("updated_at") @db.Timestamptz
  isCorrected     Boolean        @default(false) @map("is_corrected")
  correctionOf    String?        @map("correction_of") @db.Uuid

  // Relations
  operation    Operation?    @relation(fields: [operationId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploader     User          @relation("DocumentUploader", fields: [uploadedBy], references: [id])
  validator    User?         @relation("DocumentValidator", fields: [validatedBy], references: [id])
  correctedBy  Document?     @relation("DocumentCorrections", fields: [correctionOf], references: [id])
  corrections  Document[]    @relation("DocumentCorrections")

  @@map("documents")
}

model DocumentTemplate {
  id              String       @id @default(uuid()) @db.Uuid
  organizationId  String?      @map("organization_id") @db.Uuid
  documentType    DocumentType @map("document_type")
  name            String       @db.VarChar(255)
  description     String?
  templateContent String?      @map("template_content")
  fileUrl         String?      @map("file_url")
  version         Int          @default(1)
  isActive        Boolean      @default(true) @map("is_active")
  createdBy       String       @map("created_by") @db.Uuid
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime     @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator      User          @relation(fields: [createdBy], references: [id])

  @@map("document_templates")
}

// =============================================================================
// PROFESSIONALS
// =============================================================================

model Professional {
  id                String             @id @default(uuid()) @db.Uuid
  userId            String             @map("user_id") @db.Uuid
  professionalType  ProfessionalType   @map("professional_type")
  companyName       String?            @map("company_name") @db.VarChar(255)
  registrationNumber String?           @map("registration_number") @db.VarChar(100)
  specializations   Json               @default("[]")
  serviceAreas      Json               @default("[]") @map("service_areas")
  hourlyRate        Decimal?           @map("hourly_rate") @db.Decimal(10, 2)
  isVerified        Boolean            @default(false) @map("is_verified")
  verifiedBy        String?            @map("verified_by") @db.Uuid
  verifiedAt        DateTime?          @map("verified_at") @db.Timestamptz
  isActive          Boolean            @default(true) @map("is_active")
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime           @updatedAt @map("updated_at") @db.Timestamptz
  isCorrected       Boolean            @default(false) @map("is_corrected")
  correctionOf      String?            @map("correction_of") @db.Uuid

  // Relations
  user         User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifier     User?                    @relation("ProfessionalVerifier", fields: [verifiedBy], references: [id])
  assignments  ProfessionalAssignment[]
  correctedBy  Professional?            @relation("ProfessionalCorrections", fields: [correctionOf], references: [id])
  corrections  Professional[]           @relation("ProfessionalCorrections")

  @@map("professionals")
}

model ProfessionalAssignment {
  id             String    @id @default(uuid()) @db.Uuid
  operationId    String    @map("operation_id") @db.Uuid
  professionalId String    @map("professional_id") @db.Uuid
  assignedBy     String    @map("assigned_by") @db.Uuid
  assignedAt     DateTime  @default(now()) @map("assigned_at") @db.Timestamptz
  completedAt    DateTime? @map("completed_at") @db.Timestamptz
  status         String    @default("assigned") @db.VarChar(50)
  notes          String?
  isActive       Boolean   @default(true) @map("is_active")

  // Relations
  operation    Operation    @relation(fields: [operationId], references: [id], onDelete: Cascade)
  professional Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  assigner     User         @relation(fields: [assignedBy], references: [id])

  @@map("professional_assignments")
}

// =============================================================================
// NOTIFICATIONS AND COMMUNICATION
// =============================================================================

model Notification {
  id           String           @id @default(uuid()) @db.Uuid
  userId       String           @map("user_id") @db.Uuid
  operationId  String?          @map("operation_id") @db.Uuid
  type         NotificationType
  title        String           @db.VarChar(255)
  message      String
  isRead       Boolean          @default(false) @map("is_read")
  readAt       DateTime?        @map("read_at") @db.Timestamptz
  emailSent    Boolean          @default(false) @map("email_sent")
  emailSentAt  DateTime?        @map("email_sent_at") @db.Timestamptz
  createdAt    DateTime         @default(now()) @map("created_at") @db.Timestamptz
  metadata     Json             @default("{}")

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  operation Operation? @relation(fields: [operationId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// =============================================================================
// AUDIT AND DATA INTEGRITY
// =============================================================================

model AuditLog {
  id             String        @id @default(uuid()) @db.Uuid
  userId         String?       @map("user_id") @db.Uuid
  organizationId String?       @map("organization_id") @db.Uuid
  tableName      String        @map("table_name") @db.VarChar(100)
  recordId       String        @map("record_id") @db.Uuid
  action         String        @db.VarChar(50)
  oldValues      Json?         @map("old_values")
  newValues      Json?         @map("new_values")
  ipAddress      String?       @map("ip_address")
  userAgent      String?       @map("user_agent")
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user         User?         @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@map("audit_logs")
}

model DataCorrection {
  id               String    @id @default(uuid()) @db.Uuid
  tableName        String    @map("table_name") @db.VarChar(100)
  recordId         String    @map("record_id") @db.Uuid
  requestedBy      String    @map("requested_by") @db.Uuid
  approvedBy       String?   @map("approved_by") @db.Uuid
  correctionReason String    @map("correction_reason")
  oldValues        Json      @map("old_values")
  newValues        Json      @map("new_values")
  status           String    @default("pending") @db.VarChar(50)
  requestedAt      DateTime  @default(now()) @map("requested_at") @db.Timestamptz
  processedAt      DateTime? @map("processed_at") @db.Timestamptz
  notes            String?

  // Relations
  requester User  @relation("CorrectionRequester", fields: [requestedBy], references: [id])
  approver  User? @relation("CorrectionApprover", fields: [approvedBy], references: [id])

  @@map("data_corrections")
}